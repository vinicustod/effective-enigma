//
//  ListRepositoriesInteractorTests.swift
//  ItauChallenge
//
//  Created by Vinicius Custodio on 24/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ItauChallenge
import XCTest

class ListRepositoriesInteractorTests: XCTestCase {

    // MARK: Subject under test
    var sut: ListRepositoriesInteractor!
    var mockGithubAPI: MockGithubService!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupListRepositoriesInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupListRepositoriesInteractor() {
        sut = ListRepositoriesInteractor()
        mockGithubAPI = MockGithubService()
        sut.worker = ListRepositoriesWorker(githubAPI: mockGithubAPI)
    }

    // MARK: Tests
    func testLoadRepo() {
        // Given
        let mock = MockListRepositoriesPresentationLogic()
        sut.presenter = mock
        mockGithubAPI.mockType = .searchRepos
        let request = ListRepositories.LoadPage.Request(currentPage: 0)

        // When
        sut.loadRepositories(request)

        // Then
        XCTAssertTrue(mock.loadedRepo)
    }

    func testFailLoadRepo() {
        // Given
        let mock = MockListRepositoriesPresentationLogic()
        sut.presenter = mock
        mockGithubAPI.mockType = .error
        let request = ListRepositories.LoadPage.Request(currentPage: 0)

        // When
        sut.loadRepositories(request)

        // Then
        XCTAssertTrue(mock.failedLoadRepo)
    }

    func testSelectRepo() {
        // Given
        let mock = MockListRepositoriesPresentationLogic()
        sut.presenter = mock
        mockGithubAPI.mockType = .searchRepos
        let request = ListRepositories.LoadPage.Request(currentPage: 0)
        sut.loadRepositories(request)

        // When
        sut.didSelectRepository(at: 0)

        // Then
        XCTAssertTrue(mock.loadRepoPullRequests)
    }

}


// MARK: Test doubles
class MockListRepositoriesPresentationLogic: ListRepositoriesPresentationLogic {
    var loadedRepo: Bool = false
    var failedLoadRepo: Bool = false
    var loadRepoPullRequests: Bool = false

    func didLoadRepositories(_ response: ListRepositories.LoadPage.Response) {
        loadedRepo = true
    }

    func didFailLoadRepositories(error: Error) {
        failedLoadRepo = true
    }

    func presentRepoPullRequests() {
        loadRepoPullRequests = true
    }


}
