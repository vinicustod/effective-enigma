//
//  ListRepositoriesPresenterTests.swift
//  ItauChallenge
//
//  Created by Vinicius Custodio on 24/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ItauChallenge
import XCTest

class ListRepositoriesPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: ListRepositoriesPresenter!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupListRepositoriesPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupListRepositoriesPresenter() {
        sut = ListRepositoriesPresenter()
    }

    // MARK: Tests
    func testDidLoadRepositories() {
        // Given
        let mock = MockListRepositoriesDisplayLogic()
        sut.viewController = mock

        let response = ListRepositories.LoadPage.Response(repositories: [])

        // When
        sut.didLoadRepositories(response)

        // Then
        XCTAssertTrue(mock.displayedRepos)
    }

    func testDidFailLoadRepositories() {
        // Given
        let mock = MockListRepositoriesDisplayLogic()
        sut.viewController = mock

        let error = GithubAPIError.decodingError

        // When
        sut.didFailLoadRepositories(error: error)

        // Then
        XCTAssertTrue(mock.displayedError)
    }

    func testShowPullRequests() {
        // Given
        let mock = MockListRepositoriesDisplayLogic()
        sut.viewController = mock

        // When
        sut.presentRepoPullRequests()

        // Then
        XCTAssertTrue(mock.displayedRepoPullRequests)
    }
}

// MARK: Test doubles
class MockListRepositoriesDisplayLogic: ListRepositoriesDisplayLogic {
    var displayedRepos: Bool = false
    var displayedError: Bool = false
    var displayedRepoPullRequests = false

    func showRepositories(_ viewModel: ListRepositories.LoadPage.ViewModel) {
        displayedRepos = true
    }

    func showError(_ error: String) {
        displayedError = true
    }

    func showRepoPullRequests() {
        displayedRepoPullRequests = true
    }
}
