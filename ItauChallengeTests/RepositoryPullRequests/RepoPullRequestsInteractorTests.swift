//
//  RepoPullRequestsInteractorTests.swift
//  ItauChallenge
//
//  Created by Vinicius Custodio on 24/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import ItauChallenge
import XCTest

let mockAvatarUrl: String = "https://avatars3.githubusercontent.com/u/14823155?v=4"

class RepoPullRequestsInteractorTests: XCTestCase {



    // MARK: Subject under test
    var sut: RepoPullRequestsInteractor!
    var mockGithubService: MockGithubService!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupRepoPullRequestsInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupRepoPullRequestsInteractor() {
        sut = RepoPullRequestsInteractor()

        let repository = Repository(fullName: "user/repo",
                                    description: "teste",
                                    forks: 0, stargazersCount: 0,
                                    owner: User(login: "user",
                                                avatarUrl: URL(string: mockAvatarUrl)!))

        sut.repository = repository


        mockGithubService = MockGithubService()
        sut.worker = RepoPullRequestsWorker(githubAPI: mockGithubService)
    }

    // MARK: Tests
    func testSuccessLoadPullRequests() {
        // Given
        let mock = MockRepoPullRequestsPresentationLogic()
        sut.presenter = mock
        mockGithubService.mockType = .repoPullRequests

        let request = RepoPullRequests.LoadPullRequests.Request()

        // When
        sut.loadPullRequests(request)

        // Then
        XCTAssertTrue(mock.didFindPullRequests)
    }

    func testFailLoadPullRequests() {
        // Given
        let mock = MockRepoPullRequestsPresentationLogic()
        sut.presenter = mock
        mockGithubService.mockType = .error

        let request = RepoPullRequests.LoadPullRequests.Request()

        // When
        sut.loadPullRequests(request)

        // Then
        XCTAssertTrue(mock.didFailFind)
    }
}


class MockRepoPullRequestsPresentationLogic: RepoPullRequestsPresentationLogic {
    var didFindPullRequests: Bool = false
    var didFailFind: Bool = false

    func didFindPullRequests(_ response: RepoPullRequests.LoadPullRequests.Response) {
        self.didFindPullRequests = true
    }

    func didFailFindPullRequests(_ error: Error) {
        self.didFailFind = true
    }

    
}

